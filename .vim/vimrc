" {{{ vim-plug
call plug#begin('~/.vim/plugged')
Plug 'w0rp/ale'
Plug 'hotwatermorning/auto-git-diff'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'kalekundert/vim-coiled-snake'
Plug 'yuttie/comfortable-motion.vim'
Plug 'romainl/vim-cool'
Plug 'haya14busa/vim-edgemotion'
Plug 'editorconfig/editorconfig-vim'
Plug 'Konfekt/FastFold'
Plug 'junegunn/fzf.vim'
Plug 'lambdalisue/gina.vim'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim'
Plug 'morhetz/gruvbox'
Plug 'RRethy/vim-illuminate'
Plug 'Yggdroot/indentLine'
Plug 'henrik/vim-indexed-search'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale' | Plug 'mgee/lightline-bufferline'
Plug 'andymass/vim-matchup'
Plug 'severin-lemaignan/vim-minimap'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'ryanoasis/vim-devicons' " Load after supported plugins
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'junegunn/vim-peekaboo'
Plug 'blueyed/vim-qf_resize'
Plug 'tpope/vim-repeat'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-rsi'
Plug 'matthew-brett/vim-rst-sections'
Plug 'justinmk/vim-sneak'
Plug 'ervandew/supertab'
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'https://gitlab.com/polyzen/togglebg.vim.git'
Plug 'cespare/vim-toml'
Plug 'markonm/traces.vim'
Plug 'andymass/vim-tradewinds'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'tpope/vim-unimpaired'
call plug#end()
" }}}

" {{{ General
let g:tar_cmd = 'bsdtar' " Workaround 'unknown extended header' error
set hidden       " Allow hidden buffers
set hlsearch     " Highlight searches
set incsearch    " .. incrementally
set ignorecase   " Ignore case
set smartcase    " .. unless 'the search pattern contains upper case characters'
set laststatus=2 " Always show status line
set noshowmode   " Do not echo the mode, lightline will display it instead

" Gruvbox colorscheme with italics and true colors
scriptencoding utf-8
let &t_8f = '[38;2;%lu;%lu;%lum'
let &t_8b = '[48;2;%lu;%lu;%lum'
scriptencoding
set termguicolors
let g:gruvbox_italic = 1
colorscheme gruvbox

" Two-space indentation
set autoindent
set expandtab
set shiftwidth=2
set tabstop=2
" }}}

" {{{ Mappings
call togglebg#map('<F5>')
map <C-j> <Plug>(edgemotion-j)
map <C-k> <Plug>(edgemotion-k)
" }}}

" {{{ Plugins
let g:ale_completion_enabled = 1
let g:indentLine_char = 'âŽ¸'
let g:indentLine_fileTypeExclude = ['help']

" Close Vim if the only window left open is a NERDTree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" {{{ lightline
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [['mode', 'paste'],
  \            ['gitbranch', 'gitgutter', 'readonly', 'filename', 'modified']],
  \   'right': [['lineinfo'],
  \             ['percent'],
  \             ['fileformat', 'fileencoding', 'filetype'],
  \             ['linter_errors', 'linter_warnings', 'linter_ok']]
  \ },
  \ 'tabline': {
  \   'left': [['buffers']],
  \   'right': [['close']]
  \ },
  \ 'component_expand': {
  \   'buffers': 'lightline#bufferline#buffers',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok'
  \ },
  \ 'component_type': {
  \   'buffers': 'tabsel',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error'
  \ },
  \ 'component_function': {
  \   'filetype': 'MyFiletype',
  \   'fileformat': 'MyFileformat',
  \   'gitbranch': 'gina#component#repo#branch',
  \   'gitgutter': 'LightLineGitGutter'
  \ },
  \ 'component': {
  \   'separator': ''
  \ },
  \ }

let g:lightline#bufferline#enable_devicons  = 1
let g:lightline#bufferline#min_buffer_count = 2
let g:lightline#bufferline#show_number      = 1
let g:lightline#bufferline#unicode_symbols  = 1

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightLineGitGutter()
  if exists('*GitGutterGetHunkSummary') && !empty(gina#component#repo#name())
    let [ l:added, l:modified, l:removed ] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', l:added, l:modified, l:removed)
  endif
  return ''
endfunction
" }}}

" {{{ Tagbar
let g:tagbar_type_rst = {
    \ 'ctagstype': 'rst',
    \ 'ctagsbin' : 'rst2ctags',
    \ 'ctagsargs' : '-f - --sort=no',
    \ 'kinds' : [
        \ 's:sections'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section'
    \ },
    \ 'sort': 0,
\ }
" }}}
" }}}

" vim: fdm=marker

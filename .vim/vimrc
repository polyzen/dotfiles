call plug#begin('~/.vim/plugged')
Plug 'w0rp/ale'
Plug 'osyo-manga/vim-anzu'
Plug 'haya14busa/vim-asterisk'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'yuttie/comfortable-motion.vim'
Plug 'maralla/completor.vim'
Plug 'itchyny/vim-cursorword'
Plug 'Shougo/denite.nvim'
Plug 'haya14busa/vim-edgemotion'
Plug 'sgur/vim-editorconfig'
Plug 'junegunn/fzf.vim'
Plug 'lambdalisue/gina.vim'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim'
Plug 'morhetz/gruvbox'
Plug 'Yggdroot/indentLine'
Plug 'haya14busa/is.vim'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale' | Plug 'taohex/lightline-buffer'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ryanoasis/vim-devicons' " Load after supported plugins
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'itchyny/vim-parenmatch'
Plug 'tpope/vim-repeat'
Plug 'jremmen/vim-ripgrep'
Plug 'matthew-brett/vim-rst-sections', { 'for': 'rst' }
Plug 'justinmk/vim-sneak'
Plug 'ervandew/supertab'
Plug 'tpope/vim-surround'
Plug 'dhruvasagar/vim-table-mode', { 'for': ['markdown', 'rst'] }
Plug 'majutsushi/tagbar'
Plug 'polyzen/togglebg.vim'
Plug 'cespare/vim-toml'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'tpope/vim-unimpaired'
Plug 'jalvesaq/vimcmdline'
call plug#end()

" Two-space indentation
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Ignore case unless 'the search pattern contains upper case characters'
set ignorecase
set smartcase

" Colorscheme
let &t_8f='[38;2;%lu;%lu;%lum'
let &t_8b='[48;2;%lu;%lu;%lum'
set termguicolors
set background=dark
let g:gruvbox_italic=1
colorscheme gruvbox

" Mappings
call togglebg#map('<F5>')
map n     <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
map N     <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
map *     <Plug>(asterisk-*)<Plug>(is-nohl-1)
map g*    <Plug>(asterisk-g*)<Plug>(is-nohl-1)
map #     <Plug>(asterisk-#)<Plug>(is-nohl-1)
map g#    <Plug>(asterisk-g#)<Plug>(is-nohl-1)
map z*    <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map gz*   <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map z#    <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map gz#   <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
map <C-j> <Plug>(edgemotion-j)
map <C-k> <Plug>(edgemotion-k)

" lightline
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'gitgutter', 'readonly', 'filename', 'modified' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'percent' ],
  \              [ 'fileformat', 'fileencoding', 'filetype' ],
  \              [ 'linter_errors', 'linter_warnings', 'linter_ok' ] ]
  \ },
  \ 'tabline': {
  \   'left': [ [ 'bufferinfo' ],
  \             [ 'separator' ],
  \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ] ],
  \   'right': [ [ 'close' ] ]
  \ },
  \ 'component_expand': {
  \   'buffercurrent': 'lightline#buffer#buffercurrent',
  \   'bufferbefore': 'lightline#buffer#bufferbefore',
  \   'bufferafter': 'lightline#buffer#bufferafter',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok'
  \ },
  \ 'component_type': {
  \   'buffercurrent': 'tabsel',
  \   'bufferbefore': 'raw',
  \   'bufferafter': 'raw',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error'
  \ },
  \ 'component_function': {
  \   'bufferinfo': 'lightline#buffer#bufferinfo',
  \   'filetype': 'MyFiletype',
  \   'fileformat': 'MyFileformat',
  \   'gitbranch': 'gina#component#repo#branch',
  \   'gitgutter': 'LightLineGitGutter'
  \ },
  \ 'component': {
  \   'separator': ''
  \ },
  \ }

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightLineGitGutter()
  if exists('*GitGutterGetHunkSummary')
    let [ added, modified, removed ] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', added, modified, removed)
  endif
  return ''
endfunction

" Miscellany
let g:indentLine_char = '‚é∏'
let g:loaded_matchparen = 1
let g:tar_cmd='bsdtar'
set hidden
set hlsearch
set incsearch
set laststatus=2
set showtabline=2

" Close Vim if the only window left open is a NERDTree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" '.. prevent passwords leaking into swap, backup and undo files.'
" http://lists.zx2c4.com/pipermail/password-store/2015-July/001618.html
autocmd BufNewFile,BufRead /dev/shm/pass.* setlocal noswapfile nobackup noundofile

" Ignore warnings that aren't applicable to PKGBUILDs
autocmd BufEnter PKGBUILD let b:ale_sh_shellcheck_exclusions = 'SC2034,SC2154,SC2164'

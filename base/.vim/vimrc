" {{{ General
let g:tar_cmd = 'bsdtar' " Workaround 'unknown extended header' error
set guifont=Fantasque\ Sans\ Mono\ 12
set guioptions-=e " Use 'a non-GUI tab pages line'
set hidden        " Allow hidden buffers
set history=500
set laststatus=2  " Always show status line
set showtabline=2 " .. and tab pages line
set mouse=a       " Enable mouse (esp. for balloons and scrolling in popups)
if !has('nvim')
  set ttymouse=sgr  " .. also in 'terminals that emit SGR-styled mouse reporting'
endif
set noshowmode    " Do not echo the mode, status line will display it instead
set wildmenu      " Enable command-line completion menu
set wildmode=longest:full,full " .. with incremental completions

" Search
set hlsearch      " Highlight matches
set incsearch     " .. while typing
set ignorecase    " Ignore case
set smartcase     " .. unless 'the search pattern contains upper case characters'
set shortmess-=S  " 'Show search count message when searching'

" True colors
if !has('nvim')
  scriptencoding utf-8
  let &t_8f = '[38;2;%lu;%lu;%lum'
  let &t_8b = '[48;2;%lu;%lu;%lum'
  scriptencoding
endif
set termguicolors

" Two-space indentation
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2

if !has('nvim')
  " XT terminfo capability for tmux
  let &t_fe = "\<Esc>[?1004h"
  let &t_fd = "\<Esc>[?1004l"
endif
" }}}

" {{{ Plugin management
call plug#begin('~/.vim/plugged')
Plug 'ntpeters/vim-better-whitespace'
Plug 'moll/vim-bbye'
if has('nvim')
  Plug 'norcalli/nvim-colorizer.lua'
else
  Plug 'ap/vim-css-color'
endif
Plug 'romainl/vim-cool'
Plug 'rbong/vim-crystalline'
let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_tabline_fn = 'TabLine'
let g:crystalline_theme = 'gruvbox'

Plug 'tpope/vim-dispatch'
Plug 'junegunn/vim-easy-align'
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

Plug 'editorconfig/editorconfig-vim'
Plug 'Konfekt/FastFold'
Plug 'Jorengarenar/fauxClip'
Plug 'lambdalisue/fern.vim' | Plug 'lambdalisue/fern-renderer-nerdfont.vim'
let g:fern#renderer = 'nerdfont'

Plug 'lambdalisue/glyph-palette.vim'
augroup my_glyph_palette
  autocmd! *
  autocmd FileType fern call glyph_palette#apply()
augroup END

Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim'
if has('nvim')
  Plug 'rktjmp/lush.nvim'
  Plug 'npxbr/gruvbox.nvim'
else
  Plug 'gruvbox-community/gruvbox'
endif
let g:gruvbox_italic = 1

Plug 'machakann/vim-highlightedyank'
if has('nvim')
  Plug 'lukas-reineke/indent-blankline.nvim', { 'branch': 'lua' }
else
  Plug 'Yggdroot/indentLine'
endif
let g:indentLine_char_list = ['|', 'Â¦', 'â”†', 'â”Š']
let g:indentLine_fileTypeExclude = ['help']
let g:indentLine_bufTypeExclude = ['terminal']

Plug 'andymass/vim-matchup'
let g:matchup_matchparen_offscreen = {}

if executable('code-minimap')
  Plug 'wfxr/minimap.vim'
endif
Plug 'markwu/vim-mrufiles'
Plug 'lambdalisue/nerdfont.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'blueyed/vim-qf_resize'
Plug 'itchyny/vim-qfedit'
Plug 'unblevable/quick-scope'
let g:qs_enable=0

Plug 'AndrewRadev/quickpeek.vim'
Plug 'tpope/vim-repeat'
Plug 'rhysd/reply.vim'
Plug 'tpope/vim-rsi'
Plug 'matthew-brett/vim-rst-sections'
Plug 'mhinz/vim-signify'
let g:signify_skip = { 'vcs': { 'deny': ['git'] } }

Plug 'AndrewRadev/splitjoin.vim'
Plug 'lambdalisue/suda.vim'
Plug 'dhruvasagar/vim-table-mode'
Plug 'cespare/vim-toml'
Plug 'markonm/traces.vim'
Plug 'andymass/vim-tradewinds'
if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  set foldmethod=expr
  set foldexpr=nvim_treesitter#foldexpr()

  Plug 'romgrk/nvim-treesitter-context'
else
  Plug 'kalekundert/vim-coiled-snake'
  Plug 'wellle/context.vim', { 'branch': '68-incremental-cache' }
  Plug 'arzg/vim-rust-syntax-ext'
endif
Plug 'tpope/vim-unimpaired'
Plug 'dhruvasagar/vim-zoom'
let g:zoom#statustext = "\uf848 "

" Completions
if has('nvim')
  set completeopt=menuone,noselect
  Plug 'hrsh7th/nvim-compe'
  let g:compe = {}
  let g:compe.enabled = v:true
  let g:compe.source = {
    \ 'path': v:true,
    \ 'buffer': v:true,
    \ 'tags': v:true,
    \ 'nvim_lsp': v:true,
    \ 'vsnip': v:true,
    \ }
  inoremap <silent><expr> <C-Space> compe#complete()
  inoremap <silent><expr> <CR>      compe#confirm('<CR>')
  inoremap <silent><expr> <C-e>     compe#close('<C-e>')
  inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
  inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
else
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
endif

Plug 'rafamadriz/friendly-snippets'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
imap <expr> <C-j>   vsnip#expandable() ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable() ? '<Plug>(vsnip-expand)'         : '<C-j>'
imap <expr> <C-l>   vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
imap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Git
if executable('git')
  Plug 'hotwatermorning/auto-git-diff'
  Plug 'rhysd/committia.vim'
  Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
  Plug 'shumphrey/fugitive-gitlab.vim' | Plug 'tpope/vim-rhubarb'
  Plug 'rhysd/git-messenger.vim'
  if has('nvim')
    Plug 'nvim-lua/plenary.nvim'
    Plug 'lewis6991/gitsigns.nvim'
  else
    Plug 'airblade/vim-gitgutter'
    let g:gitgutter_preview_win_floating = 1
  endif

  function! MyGitStatusline() abort
    if &modifiable && !empty(get(b:, 'git_dir', ''))
      let l:out = ''
      if has('nvim')
        let l:out .= get(b:,'gitsigns_status','') . ' '
        let l:branch = get(b:,'gitsigns_head','')
      else
        if g:gitgutter_enabled
          let [l:added, l:modified, l:removed] = GitGutterGetHunkSummary()
          let l:out .= printf('+%d ~%d -%d ', l:added, l:modified, l:removed)
        endif
        let l:branch = FugitiveHead()
      endif
      let l:out .= l:branch !=# '' ? "\ue0a0 " . l:branch : ''
      return !empty(l:out) ? ' ' . l:out : ''
    else
      return ''
    endif
  endfunction
endif

" LSP
if has('nvim')
  Plug 'neovim/nvim-lspconfig'
  Plug 'kosayoda/nvim-lightbulb'
  augroup my_lsp_lightbulb
    autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()
  augroup END
else
  Plug 'prabirshrestha/vim-lsp'
  let g:lsp_document_code_action_signs_enabled = 0
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_semantic_enabled = 1
  set foldmethod=expr
    \ foldexpr=lsp#ui#vim#folding#foldexpr()
    \ foldtext=lsp#ui#vim#folding#foldtext()
  let g:lsp_work_done_progress_enabled = 1
  function! MyLspProgress() abort
    let l:progress = lsp#get_progress()
    if empty(l:progress) | return '' | endif
    let l:progress = l:progress[len(l:progress) - 1]
    return l:progress['server'] . ': ' . l:progress['message']
  endfunction
  augroup my_crystalline_lsp
    autocmd!
    autocmd User lsp_progress_updated call crystalline#set_statusline(g:crystalline_statusline_fn)
  augroup END

  Plug 'mattn/vim-lsp-settings'
  let g:lsp_settings = {
    \  'clangd': { 'disabled': v:true },
    \  'efm-langserver': { 'disabled': v:false }
    \}
  let g:lsp_settings_enable_suggestions = 0
endif
if executable('ccls')
  Plug 'm-pilia/vim-ccls' | Plug 'jackguo380/vim-lsp-cxx-highlight'
  if !has('nvim')
    augroup lsp_ccls
      autocmd!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'ccls',
        \ 'cmd': {server_info->['ccls']},
        \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
        \ 'initialization_options': {
        \   'highlight': { 'lsRanges' : v:true },
        \ },
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
        \ })
    augroup END
  endif
endif

Plug 'liuchengxu/vista.vim'
if has('nvim')
  let g:vista_default_executive = 'nvim_lsp'
else
  let g:vista_default_executive = 'vim_lsp'
endif
call plug#end()

colorscheme gruvbox
let g:clap_enable_icon = 1 " For system-installed vim-clap
if has('nvim')
  lua << EOF
require('colorizer').setup()
require('gitsigns').setup()
require('lsp')
require('nvim-treesitter.configs').setup {
  highlight = {
    enable = true,
    disable = { "c", "cpp" },
  },
  incremental_selection = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  matchup = {
    enable = true,
  },
}
EOF
endif
" }}}

" {{{ Status and tab pages lines
function! StatusLine(current, width)
  let l:s = ''

  if a:current
    let l:s .= crystalline#mode() . crystalline#right_mode_sep('')
  else
    let l:s .= '%#CrystallineInactive#'
  endif
  let l:s .= ' %t%h%w%m%r '
  if a:current
    let l:s .= '%{zoom#statusline()}' . crystalline#right_sep('', 'Fill')
    if a:width > 80
      if has('nvim')
        let l:s .= '%{MyGitStatusline()}'
      else
        let l:s .= '%{MyGitStatusline()} %{MyLspProgress()}'
      endif
    endif
  endif

  let l:s .= '%='
  if a:current
    let l:s .= crystalline#left_sep('', 'Fill') . ' %{&paste ?"PASTE ":""}%{&spell?"SPELL ":""}'
    let l:s .= crystalline#left_mode_sep('')
  endif
  if a:width > 80
    let l:s .= ' %{strlen(&filetype) ? &filetype . " " . nerdfont#find() . " " : ""}'
    let l:s .= '[%{&fenc!=#""?&fenc:&enc}][%{nerdfont#fileformat#find()} ]'
  else
  endif
  let l:s .= ' %l/%L %c%V %P '

  return l:s
endfunction

function! TabLabel(buf, max_width) abort
  let [l:left, l:name, l:short_name, l:right] = crystalline#default_tablabel_parts(a:buf, a:max_width)
  return l:left . l:short_name . ' ' . nerdfont#find(l:name) . (l:right ==# ' ' ? '' : ' ') . l:right
endfunction

function! TabLine() abort
  return crystalline#bufferline(0, 0, 0, 1, 'TabLabel', crystalline#default_tabwidth() + 3)
endfunction
" }}}

" vim: fdm=marker

" {{{ General
let g:tar_cmd = 'bsdtar' " Workaround 'unknown extended header' error
set guifont=Fantasque\ Sans\ Mono\ 12
set guioptions-=e " Use 'a non-GUI tab pages line'
set hidden        " Allow hidden buffers
set hlsearch      " Highlight searches
set incsearch     " .. incrementally
set ignorecase    " 'Ignore case in search patterns'
set smartcase     " .. unless 'the search pattern contains upper case characters'
set laststatus=2  " Always show status line
set showtabline=2 " .. and tab pages line
set mouse=a       " Enable mouse (esp. for balloons and scrolling in popups)
set ttymouse=sgr  " .. also in 'terminals that emit SGR-styled mouse reporting'
set noshowmode    " Do not echo the mode, status line will display it instead
set shortmess-=S  " 'Show search count message when searching'

" True colors
scriptencoding utf-8
let &t_8f = '[38;2;%lu;%lu;%lum'
let &t_8b = '[48;2;%lu;%lu;%lum'
scriptencoding
set termguicolors

" Two-space indentation
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2
" }}}

" {{{ Plugin management
call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
let g:ale_set_balloons = 1

Plug 'hotwatermorning/auto-git-diff'
Plug 'moll/vim-bbye'
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'rhysd/clever-f.vim'
Plug 'kalekundert/vim-coiled-snake'
Plug 'rhysd/committia.vim'
Plug 'maralla/completor.vim'
let g:completor_complete_options = 'menuone,noselect,popup'
let g:completor_filetype_map = {
  \ 'sh': {'ft': 'ale'},
  \ 'python': {'ft': 'ale'},
  \ 'rust': {'ft': 'ale'},
  \ }

Plug 'romainl/vim-cool'
Plug 'rbong/vim-crystalline'
let g:crystalline_enable_sep = 1
let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_tabline_fn = 'TabLine'
let g:crystalline_theme = 'gruvbox'

Plug 'ap/vim-css-color'
Plug 'tpope/vim-dispatch'
Plug 'junegunn/vim-easy-align'
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

Plug 'Shougo/echodoc.vim'
Plug 'haya14busa/vim-edgemotion'
map <C-j> <Plug>(edgemotion-j)
map <C-k> <Plug>(edgemotion-k)

Plug 'editorconfig/editorconfig-vim'
Plug 'Konfekt/FastFold'
Plug 'Jorengarenar/fauxClip'
Plug 'lambdalisue/fern.vim' | Plug 'lambdalisue/fern-renderer-nerdfont.vim'
let g:fern#renderer = 'nerdfont'

Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
Plug 'shumphrey/fugitive-gitlab.vim' | Plug 'tpope/vim-rhubarb'
Plug 'rhysd/git-messenger.vim', { 'on': 'GitMessenger' }
Plug 'airblade/vim-gitgutter'
let g:gitgutter_preview_win_floating = 1

Plug 'lambdalisue/glyph-palette.vim'
augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
augroup END

Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim'
Plug 'gruvbox-community/gruvbox'
let g:gruvbox_italic = 1

Plug 'RRethy/vim-illuminate'
Plug 'Yggdroot/indentLine'
let g:indentLine_char_list = ['|', 'Â¦', 'â”†', 'â”Š']
let g:indentLine_bufTypeExclude = ['help']

"Plug 'maximbaz/lightline-ale'
Plug 'andymass/vim-matchup'
let g:matchup_matchparen_offscreen = { 'method': 'popup' }

Plug 'severin-lemaignan/vim-minimap'
Plug 'lambdalisue/nerdfont.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'blueyed/vim-qf_resize'
Plug 'itchyny/vim-qfedit'
Plug 'unblevable/quick-scope', { 'on': 'QuickScopeToggle' }
Plug 'AndrewRadev/quickpeek.vim'
Plug 'tpope/vim-repeat'
Plug 'rhysd/reply.vim', { 'on': ['Repl', 'ReplAuto'] }
Plug 'tpope/vim-rsi'
Plug 'matthew-brett/vim-rst-sections'
Plug 'arzg/vim-rust-syntax-ext'
Plug 'lotabout/skim.vim'
Plug 'psliwka/vim-smoothie'
Plug 'justinmk/vim-sneak'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'aymericbeaumet/vim-symlink'
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'cespare/vim-toml'
Plug 'markonm/traces.vim'
Plug 'andymass/vim-tradewinds'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
let g:snips_author = ''
let g:snips_email = ''

Plug 'tpope/vim-unimpaired'
Plug 'liuchengxu/vista.vim'
let g:vista_executive_for = {
  \ 'sh': 'ale',
  \ 'python': 'ale',
  \ 'rust': 'ale',
  \ }

Plug 'dhruvasagar/vim-zoom'
call plug#end()
colorscheme gruvbox
" }}}

" {{{ Status and tab pages lines
function! StatusLine(current, width)
  let l:s = ''

  if a:current
    let l:s .= crystalline#mode() . crystalline#right_mode_sep('')
  else
    let l:s .= '%#CrystallineInactive#'
  endif
  let l:s .= ' %t%h%w%m%r '
  if a:current
    let l:s .= '%{zoom#statusline()}' . crystalline#right_sep('', 'Fill')
    if a:width > 80
      let l:s .= ' %{MyGitGutter()}%{MyFugitive()}'
    endif
  endif

  let l:s .= '%='
  if a:current
    if a:width > 80
      let l:s .= '%{get(b:, "vista_nearest_method_or_function", "")} '
    endif
    let l:s .= crystalline#left_sep('', 'Fill') . ' %{&paste ?"PASTE ":""}%{&spell?"SPELL ":""}'
    let l:s .= crystalline#left_mode_sep('')
  endif
  if a:width > 80
    let l:s .= ' %{strlen(&filetype) ? &filetype . " " . nerdfont#find() . " " : ""}'
      \ . '[%{&fenc!=#""?&fenc:&enc}][%{nerdfont#fileformat#find()} ]'
  else
  endif
  let l:s .= ' %l/%L %c%V %P '
  if a:current
    let l:s .= MyTrailingWhitespace()
  endif

  return l:s
endfunction

function! TabLabel(buf, max_width) abort
    let [l:left, l:name, l:short_name, l:right] = crystalline#default_tablabel_parts(a:buf, a:max_width)
    return l:left . l:short_name . ' ' . nerdfont#find(l:name) . (l:right ==# ' ' ? '' : ' ') . l:right
endfunction

function! TabLine() abort
    return crystalline#bufferline(0, 0, 0, 1, 'TabLabel', crystalline#default_tabwidth() + 3)
endfunction

function! s:CustomizeCrystalline() abort
  if &background ==# 'dark'
    highlight CrystallineWarning ctermfg=235 ctermbg=214 guifg=#282828 guibg=#fabd2f
    highlight CrystallineError ctermfg=235 ctermbg=208 guifg=#282828 guibg=#fe8019
  else
    highlight CrystallineWarning ctermfg=229 ctermbg=136 guifg=#fbf1c7 guibg=#b57614
    highlight CrystallineError ctermfg=229 ctermbg=130 guifg=#fbf1c7 guibg=#af3a03
  endif
endfunction

augroup MyCrystalline_config
  autocmd!
  autocmd User CrystallineSetTheme call s:CustomizeCrystalline()
augroup END

function! MyGitGutter()
  if &modifiable && exists('b:git_dir') && g:gitgutter_enabled
    let [ l:added, l:modified, l:removed ] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d ', l:added, l:modified, l:removed)
  endif
  return ''
endfunction

function! MyFugitive()
  if &modifiable && exists('b:git_dir')
    let l:branch = FugitiveHead()
    return l:branch !=# '' ? "\ue0a0 " . l:branch : ''
  endif
  return ''
endfunction

function! MyTrailingWhitespace()
  if &modifiable && &buftype !=# 'terminal'
    return search('\s$', 'nw') ? crystalline#left_sep('Warning', crystalline#mode_hi()) . " \u2022 " : ''
  endif
  return ''
endfunction

"let g:lightline#ale#indicator_checking = "\uf110"
"let g:lightline#ale#indicator_infos = "\uf129 "
"let g:lightline#ale#indicator_warnings = "\uf071 "
"let g:lightline#ale#indicator_errors = "\uf00d "
let g:zoom#statustext = "\uf848 "
" }}}

" vim: fdm=marker

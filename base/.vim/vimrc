" {{{ vim-plug
call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
Plug 'hotwatermorning/auto-git-diff'
Plug 'moll/vim-bbye'
Plug 'kalekundert/vim-coiled-snake'
Plug 'lilydjwg/colorizer'
Plug 'romainl/vim-cool'
Plug 'tpope/vim-dispatch'
Plug 'junegunn/vim-easy-align'
Plug 'Shougo/echodoc.vim'
Plug 'haya14busa/vim-edgemotion'
Plug 'editorconfig/editorconfig-vim'
Plug 'Konfekt/FastFold'
Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
Plug 'shumphrey/fugitive-gitlab.vim' | Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim'
Plug 'gruvbox-community/gruvbox'
Plug 'RRethy/vim-illuminate'
Plug 'Yggdroot/indentLine'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'mgee/lightline-bufferline'
Plug 'maximbaz/lightline-trailing-whitespace'
Plug 'andymass/vim-matchup'
Plug 'severin-lemaignan/vim-minimap'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'ryanoasis/vim-devicons' " Load after supported plugins
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'junegunn/vim-peekaboo'
Plug 'blueyed/vim-qf_resize'
Plug 'itchyny/vim-qfedit'
Plug 'unblevable/quick-scope', { 'on': 'QuickScopeToggle' }
Plug 'AndrewRadev/quickpeek.vim'
Plug 'tpope/vim-repeat'
Plug 'rhysd/reply.vim', { 'on': ['Repl', 'ReplAuto'] }
Plug 'tpope/vim-rsi'
Plug 'matthew-brett/vim-rst-sections'
Plug 'lotabout/skim.vim'
Plug 'psliwka/vim-smoothie'
Plug 'justinmk/vim-sneak'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'aymericbeaumet/vim-symlink'
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'https://gitlab.com/polyzen/togglebg.vim.git'
Plug 'cespare/vim-toml'
Plug 'markonm/traces.vim'
Plug 'andymass/vim-tradewinds'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'tpope/vim-unimpaired'
Plug 'liuchengxu/vista.vim'
Plug 'dhruvasagar/vim-zoom'
call plug#end()
" }}}

" {{{ General
let g:tar_cmd = 'bsdtar' " Workaround 'unknown extended header' error
set hidden       " Allow hidden buffers
set hlsearch     " Highlight searches
set incsearch    " .. incrementally
set ignorecase   " Ignore case
set smartcase    " .. unless 'the search pattern contains upper case characters'
set laststatus=2 " Always show status line
set noshowmode   " Do not echo the mode, lightline will display it instead
set shortmess-=S " Show search count message when searching

" Gruvbox colorscheme with italics and true colors
scriptencoding utf-8
let &t_8f = '[38;2;%lu;%lu;%lum'
let &t_8b = '[48;2;%lu;%lu;%lum'
scriptencoding
set termguicolors
let g:gruvbox_italic = 1
colorscheme gruvbox

" Two-space indentation
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2
" }}}

" {{{ Mappings
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
map <C-j> <Plug>(edgemotion-j)
map <C-k> <Plug>(edgemotion-k)
call togglebg#map('<F5>')
" }}}

" {{{ Plugins
let g:ale_completion_enabled = 1
let g:gitgutter_preview_win_floating = 1
let g:indentLine_char = 'âŽ¸'
let g:indentLine_fileTypeExclude = ['help']
let g:matchup_matchparen_offscreen = { 'method': 'popup' }
let g:vista_executive_for = {
  \ 'python': 'ale',
  \ 'rust': 'ale',
  \ }

augroup vimrc
  autocmd!
  " Close Vim if the only window left open is a NERDTree
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

" {{{ lightline
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [['mode', 'paste'],
  \            ['zoom', 'githunks', 'gitbranch', 'readonly', 'filename', 'method']],
  \   'right': [['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'trailing', 'lineinfo'],
  \             ['percent'],
  \             ['fileformat', 'fileencoding', 'filetype']]
  \ },
  \ 'tabline': {
  \   'left': [['buffers']],
  \   'right': [['close']]
  \ },
  \ 'component_expand': {
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_ok': 'lightline#ale#ok',
  \   'trailing': 'lightline#trailing_whitespace#component',
  \   'buffers': 'lightline#bufferline#buffers'
  \ },
  \ 'component_type': {
  \   'linter_checking': 'left',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'left',
  \   'trailing': 'error',
  \   'buffers': 'tabsel'
  \ },
  \ 'component_function': {
  \   'zoom': 'zoom#statusline',
  \   'githunks': 'LightlineGitGutter',
  \   'gitbranch': 'FugitiveHead',
  \   'filename': 'LightlineFilename',
  \   'method': 'NearestMethodOrFunction',
  \   'fileformat': 'LightlineFileformat',
  \   'filetype': 'LightlineFiletype'
  \ }
  \ }

let g:lightline#bufferline#enable_devicons  = 1
let g:lightline#bufferline#min_buffer_count = 2
let g:lightline#bufferline#show_number      = 1
let g:lightline#bufferline#unicode_symbols  = 1
let g:lightline#trailing_whitespace#indicator = 'â€¢'

function! LightlineGitGutter()
  if !get(g:, 'gitgutter_enabled', 0) || empty(FugitiveHead())
    return ''
  endif
  let [ l:added, l:modified, l:removed ] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', l:added, l:modified, l:removed)
endfunction

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' [+]' : ''
  return filename . modified
endfunction

function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction
" }}}
" }}}

" vim: fdm=marker
